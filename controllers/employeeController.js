import Employee from '../models/Employee.js';
import Establishment from '../models/Establishment.js';
import mongoose from 'mongoose';
import { generateEmployeeCard } from '../services/employeeCardService.js';

export const getEmployees = async (req, res) => {
Â  // ... (inchangÃ©)
Â  try {
Â  Â  const employees = await Employee.find({ establishment: req.user.establishment })
Â  Â  Â  .populate('createdBy', 'fullName')
Â  Â  Â  .sort({ createdAt: -1 });

Â  Â  res.json(employees);
Â  } catch (error) {
Â  Â  res.status(500).json({ message: error.message });
Â  }
};

export const getEmployee = async (req, res) => {
Â  // ... (inchangÃ©)
Â  try {
Â  Â  const employee = await Employee.findById(req.params.id)
Â  Â  Â  .populate('establishment', 'name manager address phone')
Â  Â  Â  .populate('createdBy', 'fullName');

Â  Â  if (!employee) {
Â  Â  Â  return res.status(404).json({ message: 'EmployÃ© non trouvÃ©' });
Â  Â  }

Â  Â  if (employee.establishment._id.toString() !== req.user.establishment.toString()) {
Â  Â  Â  return res.status(403).json({ message: 'AccÃ¨s non autorisÃ©' });
Â  Â  }

Â  Â  res.json(employee);
Â  } catch (error) {
Â  Â  res.status(500).json({ message: error.message });
Â  }
};

export const createEmployee = async (req, res) => {
Â  const session = await mongoose.startSession();
Â  session.startTransaction();

Â  try {
Â  Â  const {
Â  Â  Â  fullName, civility, profession, maritalStatus, childrenCount,
Â  Â  Â  diploma, cmu, cni, salary, emergencyContact, cnpsNumber,
Â  Â  Â  contractType, contractDuration, contractStartDate, contractEndDate,
Â  Â  Â  photo 
Â  Â  } = req.body;

Â  Â  const establishment = await Establishment.findById(req.user.establishment);
Â  Â  if (!establishment) {
Â  Â  Â  await session.abortTransaction();
Â  Â  Â  return res.status(404).json({ message: 'Ã‰tablissement non trouvÃ©' });
Â  Â  }

Â  Â  const existingCNI = await Employee.findOne({ cni });
Â  Â  if (existingCNI) {
Â  Â  Â  await session.abortTransaction();
Â  Â  Â  return res.status(400).json({ message: 'Un employÃ© avec ce CNI existe dÃ©jÃ ' });
Â  Â  }

Â  Â  const employeeData = {
Â  Â  Â  establishment: req.user.establishment,
Â  Â  Â  fullName,
Â  Â  Â  civility,
Â  Â  Â  profession,
Â  Â  Â  maritalStatus,
Â  Â  Â  childrenCount: parseInt(childrenCount) || 0,
Â  Â  Â  diploma: diploma || '',
Â  Â  Â  cmu: cmu || '',
Â  Â  Â  cni,
Â  Â  Â  salary: parseFloat(salary),
Â  Â  Â  // ðŸ”‘ CORRECTION : VÃ©rifie si c'est une string avant de parser
Â  Â  Â  emergencyContact: 
Â  Â  Â  Â  emergencyContact
Â  Â  Â  Â  Â  ? (typeof emergencyContact === 'string' ? JSON.parse(emergencyContact) : emergencyContact) 
Â  Â  Â  Â  Â  : {},
Â  Â  Â  cnpsNumber,
Â  Â  Â  contractType,
Â  Â  Â  contractDuration: contractDuration || '',
Â  Â  Â  contractStartDate,
Â  Â  Â  contractEndDate: contractEndDate || null,
Â  Â  Â  photo: photo || '', 
Â  Â  Â  createdBy: req.user._id
Â  Â  };

Â  Â  const employee = new Employee(employeeData);
Â  Â  await employee.save({ session });

Â  Â  const cardData = await generateEmployeeCard(employee);
Â  Â  employee.accessCard.cardImage = cardData.cardImageUrl;
Â  Â  await employee.save({ session });

Â  Â  await session.commitTransaction();

Â  Â  const populatedEmployee = await Employee.findById(employee._id)
Â  Â  Â  .populate('establishment', 'name manager address phone')
Â  Â  Â  .populate('createdBy', 'fullName');

Â  Â  res.status(201).json(populatedEmployee);
Â  } catch (error) {
Â  Â  await session.abortTransaction();

Â  Â  if (error.name === 'ValidationError') {
Â  Â  Â  const errors = Object.values(error.errors).map(err => err.message);
Â  Â  Â  return res.status(400).json({ message: 'Erreur de validation', errors });
Â  Â  }

Â  Â  res.status(500).json({
Â  Â  Â  message: 'Erreur lors de la crÃ©ation',
Â  Â  Â  error: error.message
Â  Â  });
Â  } finally {
Â  Â  session.endSession();
Â  }
};

export const updateEmployee = async (req, res) => {
Â  try {
Â  Â  const employee = await Employee.findById(req.params.id);

Â  Â  if (!employee) {
Â  Â  Â  return res.status(404).json({ message: 'EmployÃ© non trouvÃ©' });
Â  Â  }

Â  Â  if (employee.establishment.toString() !== req.user.establishment.toString()) {
Â  Â  Â  return res.status(403).json({ message: 'AccÃ¨s non autorisÃ©' });
Â  Â  }

Â  Â  const updates = { ...req.body };

Â  Â  // Suppression de l'upload Cloudinary
Â  Â  // On prend directement l'URL envoyÃ©e depuis le frontend
Â  Â  if (updates.photo) {
Â  Â  Â  updates.photo = updates.photo;
Â  Â  }

Â  Â  if (updates.emergencyContact) {
Â  Â  Â  // ðŸ”‘ CORRECTION : VÃ©rifie si c'est une string avant de parser
Â  Â  Â  updates.emergencyContact = 
Â  Â  Â  Â  typeof updates.emergencyContact === 'string' 
Â  Â  Â  Â  Â  ? JSON.parse(updates.emergencyContact) 
Â  Â  Â  Â  Â  : updates.emergencyContact;
Â  Â  }

Â  Â  if (updates.childrenCount) {
Â  Â  Â  updates.childrenCount = parseInt(updates.childrenCount) || 0;
Â  Â  }
Â  Â  if (updates.salary) {
Â  Â  Â  updates.salary = parseFloat(updates.salary);
Â  Â  }
Â  Â  
Â  Â  // ... (Reste du code inchangÃ©)
Â  Â  const updatedEmployee = await Employee.findByIdAndUpdate(
Â  Â  Â  req.params.id,
Â  Â  Â  updates,
Â  Â  Â  { new: true, runValidators: true }
Â  Â  )
Â  Â  Â  .populate('establishment', 'name manager address phone')
Â  Â  Â  .populate('createdBy', 'fullName');

Â  Â  if (req.body.fullName || req.body.profession) {
Â  Â  Â  const cardData = await generateEmployeeCard(updatedEmployee);
Â  Â  Â  updatedEmployee.accessCard.cardImage = cardData.cardImageUrl;
Â  Â  Â  await updatedEmployee.save();
Â  Â  }

Â  Â  res.json(updatedEmployee);
Â  } catch (error) {
Â  Â  if (error.name === 'ValidationError') {
Â  Â  Â  const errors = Object.values(error.errors).map(err => err.message);
Â  Â  Â  return res.status(400).json({ message: 'Erreur de validation', errors });
Â  Â  }

Â  Â  res.status(500).json({
Â  Â  Â  message: 'Erreur lors de la mise Ã  jour',
Â  Â  Â  error: error.message
Â  Â  });
Â  }
};

export const toggleEmployeeStatus = async (req, res) => {
Â  // ... (inchangÃ©)
Â  try {
Â  Â  const employee = await Employee.findById(req.params.id);

Â  Â  if (!employee) {
Â  Â  Â  return res.status(404).json({ message: 'EmployÃ© non trouvÃ©' });
Â  Â  }

Â  Â  if (employee.establishment.toString() !== req.user.establishment.toString()) {
Â  Â  Â  return res.status(403).json({ message: 'AccÃ¨s non autorisÃ©' });
Â  Â  }

Â  Â  employee.isActive = !employee.isActive;
Â  Â  employee.accessCard.isActive = employee.isActive;

Â  Â  await employee.save();

Â  Â  res.json(employee);
Â  } catch (error) {
Â  Â  res.status(500).json({
Â  Â  Â  message: 'Erreur lors du changement de statut',
Â  Â  Â  error: error.message
Â  Â  });
Â  }
};

export const deleteEmployee = async (req, res) => {
Â  // ... (inchangÃ©)
Â  try {
Â  Â  const employee = await Employee.findById(req.params.id);

Â  Â  if (!employee) {
Â  Â  Â  return res.status(404).json({ message: 'EmployÃ© non trouvÃ©' });
Â  Â  }

Â  Â  if (employee.establishment.toString() !== req.user.establishment.toString()) {
Â  Â  Â  return res.status(403).json({ message: 'AccÃ¨s non autorisÃ©' });
Â  Â  }

Â  Â  await Employee.findByIdAndDelete(req.params.id);

Â  Â  res.json({ message: 'EmployÃ© supprimÃ© avec succÃ¨s' });
Â  } catch (error) {
Â  Â  res.status(500).json({
Â  Â  Â  message: 'Erreur lors de la suppression',
Â  Â  Â  error: error.message
Â  Â  });
Â  }
};

export const generateEmployeeCardPdf = async (req, res) => {
Â  // ... (inchangÃ©)
Â  try {
Â  Â  const employee = await Employee.findById(req.params.id)
Â  Â  Â  .populate('establishment', 'name manager address phone');

Â  Â  if (!employee) {
Â  Â  Â  return res.status(404).json({ message: 'EmployÃ© non trouvÃ©' });
Â  Â  }

Â  Â  if (employee.establishment._id.toString() !== req.user.establishment.toString()) {
Â  Â  Â  return res.status(403).json({ message: 'AccÃ¨s non autorisÃ©' });
Â  Â  }

Â  Â  const pdfBuffer = await generateEmployeeCardPdf(employee);

Â  Â  res.setHeader('Content-Type', 'application/pdf');
Â  Â  res.setHeader('Content-Disposition', `attachment; filename=carte-${employee.code}.pdf`);

Â  Â  res.send(pdfBuffer);
Â  } catch (error) {
Â  Â  res.status(500).json({
Â  Â  Â  message: 'Erreur lors de la gÃ©nÃ©ration du PDF',
Â  Â  Â  error: error.message
Â  Â  });
Â  }
};