import mongoose from 'mongoose';
import Establishment from '../models/Establishment.js';

export const establishmentAccess = async (req, res, next) => {
  const user = req.user;

  try {
    // RÃ©cupÃ©ration robuste de l'ID
    let estabId = req.params.id || req.body.establishmentId || req.query.establishmentId;

    // ğŸ”¹ Si pas dâ€™ID â†’ on prend celui de lâ€™utilisateur
    if (!estabId && user?.establishment) {
      estabId = user.establishment._id?.toString() || user.establishment.toString();
    }

    // ğŸ”¹ Si admin sans ID â†’ accÃ¨s illimitÃ©
    if (user.role === 'admin' && !estabId) {
      return next();
    }

    // ğŸ”¹ Si toujours pas dâ€™ID â†’ on laisse passer sans bloquer
    if (!estabId) {
      return next();
    }

    // VÃ©rification validitÃ© de lâ€™ID
    if (!mongoose.Types.ObjectId.isValid(estabId)) {
      return res.status(400).json({ message: 'ID Ã©tablissement invalide' });
    }

    const establishment = await Establishment.findById(estabId).lean();
    if (!establishment) {
      return res.status(404).json({ message: 'Ã‰tablissement non trouvÃ©' });
    }

    // Admin â†’ accÃ¨s complet
    if (user.role === 'admin') {
      req.establishment = establishment;
      return next();
    }

    // Manager / Caissier â†’ accÃ¨s uniquement Ã  leur Ã©tablissement
    const userEstab = user.establishment?.toString();
    if (userEstab === estabId.toString()) {
      req.establishment = establishment;
      return next();
    }

    return res.status(403).json({
      message: 'AccÃ¨s non autorisÃ© Ã  cet Ã©tablissement',
    });
  } catch (err) {
    console.error('Erreur establishmentAccess:', err);
    return res.status(500).json({
      message: 'Erreur serveur lors de la vÃ©rification des accÃ¨s',
    });
  }
};
